<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>浏览器的同源策略</title>
      <link href="/2023/02/16/liu-lan-qi-de-tong-yuan-ce-lue/"/>
      <url>/2023/02/16/liu-lan-qi-de-tong-yuan-ce-lue/</url>
      
        <content type="html"><![CDATA[<h1 id="什么是同源策略"><a href="#什么是同源策略" class="headerlink" title="什么是同源策略"></a>什么是同源策略</h1><p>同源策略是一个重要的安全策略，它用于限制一个origin（源）的文档或者它加载的脚本如何能与另一个源的资源进行交互。它能帮助阻隔恶意文档，减少可能被攻击的媒介。</p><h1 id="什么是同源"><a href="#什么是同源" class="headerlink" title="什么是同源"></a>什么是同源</h1><p>浏览器的源由用于访问它的 URL 的方案（协议（protocol））、主机名（域名（port））和端口（host）定义。只有当协议、主机和端口都匹配时，两个对象才具有相同的源, 则这两个 URL 是同源.</p><p>下面给出了与 URL <code>http://store.company.com/dir/page.html</code> 的源进行对比的示例：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token constant">URL</span>结果原因<span class="token literal-property property">http</span><span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>store<span class="token punctuation">.</span>company<span class="token punctuation">.</span>com<span class="token operator">/</span>dir2<span class="token operator">/</span>other<span class="token punctuation">.</span>html同源只有路径不同<span class="token literal-property property">http</span><span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>store<span class="token punctuation">.</span>company<span class="token punctuation">.</span>com<span class="token operator">/</span>dir<span class="token operator">/</span>inner<span class="token operator">/</span>another<span class="token punctuation">.</span>html同源只有路径不同<span class="token literal-property property">https</span><span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>store<span class="token punctuation">.</span>company<span class="token punctuation">.</span>com<span class="token operator">/</span>secure<span class="token punctuation">.</span>html失败协议不同<span class="token literal-property property">http</span><span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>store<span class="token punctuation">.</span>company<span class="token punctuation">.</span>com<span class="token operator">:</span><span class="token number">81</span><span class="token operator">/</span>dir<span class="token operator">/</span>etc<span class="token punctuation">.</span>html失败<span class="token function">端口不同</span> <span class="token punctuation">(</span> http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span> 默认端口是 <span class="token number">80</span><span class="token punctuation">)</span><span class="token literal-property property">http</span><span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>news<span class="token punctuation">.</span>company<span class="token punctuation">.</span>com<span class="token operator">/</span>dir<span class="token operator">/</span>other<span class="token punctuation">.</span>html失败主机不同<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="跨域"><a href="#跨域" class="headerlink" title="跨域"></a>跨域</h1><p>CORS全称Cross-Origin Resource Sharing，意为跨域资源共享。当一个请求url的协议,域名,端口三者之间任意一个与当前的url不同都即为跨域。跨域不一定会产生跨域问题，只有当一个资源去访问另一个不同域名或者同域名不同端口的资源时，如果此时另一个资源不允许其进行跨域资源访问，那么访问就会遇到跨域问题。</p><p>跨域时浏览器会正常发送请求给服务器，服务器会进行正常响应，将响应结果发送给浏览器，如果是跨域，此时浏览器会对响应进行校验，只有在校验不通过时，才会引发错误，从而产生跨域问题。<img src="https://img-blog.csdnimg.cn/7f50ffca72a04d49b2b397f3390a19c5.jpeg#pic_center" alt="在这里插入图片描述"><br>注意：<br>跨域问题源自于浏览器的同源策略，服务器与服务器之间通信不会有跨域。<br>跨域不只是在发生ajax过程中，只要不是同源请求都是跨域。比如用<br><code>&lt;script&gt;、&lt; link&gt;、&lt;img&gt;</code>等嵌入跨源的资源。</p><h1 id="跨域解决方法"><a href="#跨域解决方法" class="headerlink" title="跨域解决方法"></a>跨域解决方法</h1><h2 id="1-CORS方式"><a href="#1-CORS方式" class="headerlink" title="1.CORS方式"></a>1.CORS方式</h2><p>CORS （跨源资源共享） 是 HTTP 的一部分，它允许服务端来指定哪些主机可以从这个服务端加载资源。现在的主流的浏览器都支持cors的方式.。<br>CORS 通过一种机制来允许服务器声明哪些源站通过浏览器有权限访问哪些资源，该机制通过浏览器发起一个到服务器托管的跨源资源的“预检”请求。在预检中，浏览器发送的头中标示有 HTTP 方法和真实请求中会用到的响应头。<br>所以，如果需要跨域, 则需要配置响应头信息，标识是否允许。</p><p>对于简单请求来说，不会触发 CORS 预检。<br><code>HEAD、GET、POST</code> 被视为简单请求。<br>简单请求HTTP 的头信息不超出以下几种字段：（<strong>不适用于Fetch</strong> ）</p><ul><li>Accept</li><li>Accept-Language</li><li>Content-Language</li><li>Last-Event-ID</li><li>Content-Type：只限于三个值 application/x-www-form-urlencoded、multipart/form-data、text/plain</li></ul><p>会触发 CORS 预检的非简单请求（比如说请求方法是 <code>PUT</code> 或 <code>DELETE</code>，或者 <code>Content-Type</code> 字段的类型是 <code>application/json</code>，或者请求消息头包含了一些自定义的字段）</p><p>非简单请求在正式通信之前，会增加一次 HTTP 查询请求，称为“预检”请求。预检请求通过后，才会返回正常的响应内容。<br><img src="https://img-blog.csdnimg.cn/6c9ea05fe0a64450b4d85b9197e866ba.png" alt="在这里插入图片描述"></p><h2 id="2-ajax的jsonp"><a href="#2-ajax的jsonp" class="headerlink" title="2.ajax的jsonp"></a>2.ajax的jsonp</h2><p>利用 <code>&lt;script&gt;</code> 元素的这个开放策略，网页可以得到从其他来源动态产生的 JSON 资料。</p><h2 id="3-nginx"><a href="#3-nginx" class="headerlink" title="3. nginx"></a>3. nginx</h2><p>nginx实现跨域的原理，实际就是把web项目和后端接口项目放到一个域中，这样就不存在跨域问题，然后根据请求地址去请求不同服务器（真正干活的服务器。</p>]]></content>
      
      
      <categories>
          
          <category> NetWork </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第一篇文章</title>
      <link href="/2023/02/14/di-yi-pian-wen-zhang/"/>
      <url>/2023/02/14/di-yi-pian-wen-zhang/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
